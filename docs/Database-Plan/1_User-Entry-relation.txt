Some goals worth considering before setting up the database:
1-> Atomicity should be taken into consideration. I will group small things.
2-> Even the admin or whoever gets control over the database should not be able to read it. The admin here is the person who can access the database.

So, there are two models in our Database as of now.

One is the User model, and the second one is the Entry model.

# Why are there two models? Why not just one model User with entry as its nested component?
-> The reason for this is that it will created a huge unmanageable database. 
-> I mean with so many nested things, it might get difficult to manage, that's why I am breaking it down into two.
-> I want separation of concern.

# How are the two models related?
-> The user ID field will be used to link the two models.
-> The user ID of the user and the entry will also have that userID which will be able to pick it up.

# What about the second goal? That admin should not be able to read it.
-> So the entry model will already contain entries in the encrypted format.
-> We will add further security steps in the entry model.


So, the two models are:
1. User 
2. Entry

!NOTE: There will be some methods for JWT and reset password. I will copy those blueprints from MERN stack e-commerce project. Because I don't want to do those from scratch and rectify problems along the way again.

User model will have following attributes:
1. Basic meta data: username, email, encrypted password and createdAt time.
2. userID --> Will be generated by mongodb.
3. boolean accessLockedNotes --> If set true, the user will be able to access his locked notes.
4. accessPin --> Password to access locked notes.
5. Entry Object --> This will be a nested object. I will use this to give a directory structure to better organize my notes. Now, this is how I will store it in the backend. For stacking it up and all of that, I will leave it on the frontend implementation.
The entry object will have a category name as key and then values will be entry ID.
6. blockAccount --> This will be a boolean variable. If its value is true, then the user should not be allowed to access their account.
7. emailVerify --> A boolean again. If it's false then blockAccount should be true.
8. deleteTime --> When the block account will be set true, this value will be set 7 days from it. If this time stamp will be surpassed, the account should be deleted. When the block account will be set false. This should be set to infinity or something.
9. twoFactor --> This will again be a boolean. When the user's post info will be received at the backend, it will choose whether to do one factor or two factor authentication.
I can later modify this method. If it chooses one factor, then everything is fine. But if that method chooses two factor, then this boolean would be set to true. And it won't change back to false until it gets two factor authenticated.
Also, the existing JWT will expire if this variable is set to true. And the user should no longer be allowed to access the ID.
Once this gets verified, the twoFactor variable will be set again to false. 
10. oneTimePassword: For two factor authentication.
11. oneTimePasswordExpire


Using blockAccount and emailVerify, there will be four cases:
1. Case 1: emailVerify is false and blockAccount is true. This will be the case where user should verify their email address to get their account unblocked.
2. Case 2: emailVerify is true and blockAccount is false. This will be the normal default ideal case.
3. Case 3: emailVerify is true and blockAccount is true. This will be the case where user has put their account for deletion.
4. Case 4:  emailVerify is false and blockAccount is false. This should not be possible.



Entry model will have the following attributes:
1. Content which will have two formats: either it will be in the normal text format or it will be in the encrypted format.
One reason for this is if the user forgets their password and all the notes are encrypted using their password, they will be gone permanently.
2. userID to map the content
3. entryID --> Unique.
4. lockBool --> To check if the note can be accessed or not.
5. title
6. encryptedBool --> To check if the note is encrypted.